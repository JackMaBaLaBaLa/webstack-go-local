///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package category

import (
	"fmt"
	"time"

	"github.com/ch3nnn/webstack-go/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Category {
	return new(Category)
}

func NewQueryBuilder() *categoryQueryBuilder {
	return new(categoryQueryBuilder)
}

func (t *Category) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type categoryQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *categoryQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *categoryQueryBuilder) GroupByParentId(db *gorm.DB) (parentIds []int32) {
	rows, _ := db.Model(&Category{}).Select("parent_id").Group("parent_id").Rows()
	for rows.Next() {
		var parentId int32
		rows.Scan(&parentId)
		parentIds = append(parentIds, parentId)
	}

	return parentIds

}

func (qb *categoryQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Category{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *categoryQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Category{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *categoryQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Category{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *categoryQueryBuilder) First(db *gorm.DB) (*Category, error) {
	ret := &Category{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *categoryQueryBuilder) QueryOne(db *gorm.DB) (*Category, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *categoryQueryBuilder) QueryAll(db *gorm.DB) ([]*Category, error) {
	var ret []*Category
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *categoryQueryBuilder) Limit(limit int) *categoryQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *categoryQueryBuilder) Offset(offset int) *categoryQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *categoryQueryBuilder) WhereId(p mysql.Predicate, value int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereIdIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereIdNotIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderById(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereParentId(p mysql.Predicate, value int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereParentIdIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereParentIdNotIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderByParentId(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "parent_id "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereIsUsed(p mysql.Predicate, value int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereIsUsedIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereIsUsedNotIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderByIsUsed(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_used "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereSort(p mysql.Predicate, value int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereSortIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereSortNotIn(value []int32) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderBySort(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sort "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereTitle(p mysql.Predicate, value string) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereTitleIn(value []string) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereTitleNotIn(value []string) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderByTitle(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereIcon(p mysql.Predicate, value string) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereIconIn(value []string) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereIconNotIn(value []string) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderByIcon(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "icon "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereCreateTimeIn(value []time.Time) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderByCreateTime(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *categoryQueryBuilder) WhereUpdateTime(p mysql.Predicate, value time.Time) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereUpdateTimeIn(value []time.Time) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) WhereUpdateTimeNotIn(value []time.Time) *categoryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *categoryQueryBuilder) OrderByUpdateTime(asc bool) *categoryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
